__init__(self, args) # Вызывается при инициализации объекта
__add__() # добавить конкатенацию как в последовательность +
__len__() # добавить поддержку len()
__sub__() # добавить поддержку двухместного оператора -
__init__() # инициализация объекта
__repr__() # Настройка вывода репрезентативной формы.  Возвращает строку с репрезентативной формой представления x с использованием только символов набора ASCII ascii(x)
__eq__(self, other) # Как будет осуществлено x == y. По умолчанию экземпляры наших собственных классов поддерживают оператор == (который всегда возвращает False)
__lt__(self, other) # Как будет осуществлено x < y
__le__(self, other) # Как будет осуществлено x <= y
__ne__(self, other) # Как будет осуществлено x != y
__ge__(self, other) # Как будет осуществлено x >= y
__gt__(self, other) # Как будет осуществлено x > y
__new__(self) # Вызывается при создании объекта
__bool__(self) # Если реализован, возвращает значение истинности для x. Удобно, если используются конструкции вида if x:. То есть он всегда должен возвращать либо True, либо False.
__float__(self) # 
__invert__(self) # Логическое "НЕ" (битовое "НЕ" ~)
__and__(self) # Битовый и логический оператор И (&)
__or__(self) # соответствующий логическому оператору |
__ior__(self) # соответствующий комбинированному оператору присваивания |=
__iand__(self) # комбинированный операторприсваивания (&=)
__format__(self, format_spec) # Обеспечивает поддержку метода str.format() для классов существует так же format(x)
__hash__(self) # Если реализован, x сможет использоваться как ключ словаря или храниться в множестве
__str__(self) # Возвращает строковое представление x, пригодное для восприятия человеком
__rand__(self) # Этот метод вызывается в случае, когда объекты self и other принадлежат разным типам, а метод __and__() для данной пары типов не реализован. То есть возвращает значение NotImplemented.
__class__ # содержит ссылку на класс объекта
__del__(self) # вызывается при уничтожении объекта – по крайней мере в теории. По этой причине метод __del__() очень редко переопределяется он не должен использоваться для освобождения ресурсов, для закрытия файлов, сетевых соединений или подключений к базам данных.
__abs__(self) # 
__index__(self) # 
__pos__(self) #